using System.Collections;
using System.Collections.Generic;
using UnityEngine;
/*### Model タブ

1. **Mesh Compression**:
   - **Off**: 圧縮しない
   - **Low/Medium/High**: メッシュデータを圧縮してメモリ使用量を減らす

2. **Read/Write Enabled**:
   - **Enabled**: メッシュデータをスクリプトで読み書き可能

3. **Optimize Mesh**:
   - **Enabled**: メッシュデータの描画パフォーマンスを最適化

4. **Keep Quads**:
   - **Enabled**: 四角形ポリゴンを維持

5. **Weld Vertices**:
   - **Enabled**: 近接する頂点を結合してデータ量を減らす

6. **Index Format**:
   - **16 bit**: 小さなメッシュ用（頂点数が65,536未満）
   - **32 bit**: 大きなメッシュ用（頂点数が65,536以上）

7. **Normals**:
   - **Import**: モデルに付属の法線を使用
   - **Calculate**: Unityが法線を計算
   - **None**: 法線を使用しない

8. **Normals Mode**:
   - **Unweighted Legacy**: 古い法線計算方式
   - **Unweighted**: 新しい法線計算方式
   - **Angle Weighted**: 角度を考慮して計算
   - **Area Weighted**: 面積を基に計算
   - **None**: 法線を計算しない

9. **Smoothing Angle**:
   - 法線計算時の角度設定。大きいほどスムーズなシェーディング

10. **Tangents**:
    - **Import**: モデルに付属の接線を使用
    - **Calculate (MikkTSpace)**: MikkTSpaceアルゴリズムで接線を計算
    - **Calculate (Legacy)**: 旧方式で接線を計算
    - **None**: 接線を使用しない

11. **Generate Lightmap UVs**:
    - **Enabled**: ライトマップ用UVを生成

12. **Lightmap Pack Margin**:
    - ライトマップUV間のマージン設定

13. **Generate Secondary UVs**:
    - **Enabled**: 二次UVを生成

14. **Secondary UV Pack Margin**:
    - 二次UV間のマージン設定

### Rig タブ

1. **Animation Type**:
   - **None**: アニメーションをインポートしない
   - **Legacy**: 古いアニメーションシステムを使用
   - **Generic**: 汎用リグを使用
   - **Humanoid**: ヒューマノイドリグを使用

2. **Avatar Definition**:
   - **Create From This Model**: 新しいアバターを作成
   - **Copy From Other Avatar**: 他のモデルからアバターをコピー

3. **Root Node**:
   - ルートノードの指定。アニメーションの基準

4. **Optimize Game Objects**:
   - **Enabled**: 不要なボーンやオブジェクトを削除して階層を簡略化

### Animation タブ

1. **Import Animation**:
   - **Enabled**: アニメーションをインポート

2. **Animation Compression**:
   - **Off**: 圧縮しない
   - **Keyframe Reduction**: キーフレームの数を減らす
   - **Keyframe Reduction and Compression**: キーフレーム削減と圧縮を行う
   - **Optimal**: 最適な圧縮方法を使用

3. **Animation Clip Settings**:
   - **Loop Time**: アニメーションをループ
   - **Loop Pose**: ループのスムーズさを保つためポーズを調整
   - **Cycle Offset**: ループオフセットの設定
   - **Additive Reference Pose**: 加算基準ポーズの設定

4. **Root Transform Rotation**:
   - **Bake Into Pose**: 回転をポーズにベイク
   - **Based Upon**: 回転の基準設定

5. **Root Transform Position (Y)**:
   - **Bake Into Pose**: Y座標の位置をポーズにベイク
   - **Based Upon**: Y座標の基準設定

6. **Root Transform Position (XZ)**:
   - **Bake Into Pose**: XZ座標の位置をポーズにベイク
   - **Based Upon**: XZ座標の基準設定

### Materials タブ

1. **Import Materials**:
   - **Enabled**: マテリアルをインポート

2. **Material Naming**:
   - **By Base Texture Name**: ベーステクスチャ名でマテリアルを命名
   - **From Model's Material**: モデルのマテリアル名を使用

3. **Material Search**:
   - **Local Materials Folder**: ローカルフォルダーから検索
   - **Recursive Up**: 上位フォルダーを再帰的に検索
   - **Project-Wide**: プロジェクト全体から検索

### その他のオプション

1. **Import Constraints**:
   - **Enabled**: モデルの制約（コンストレイント）をインポート

 * 
 * 
 * 
 * 詳しい解説
 * 
 * 
 * 
 * 
 * 

### Model タブ

1. **Mesh Compression**:
   - **Off**: 圧縮しません。
   - **Low, Medium, High**: メッシュデータを圧縮して、メモリ使用量を減少させます。圧縮率が高いほど、データが小さくなりますが、品質が低下する可能性があります。

2. **Read/Write Enabled**:
   - **Enabled**: メッシュデータをスクリプトで読み書きできるようにします。オフにするとメモリを節約できますが、スクリプトでメッシュを操作できなくなります。

3. **Optimize Mesh**:
   - **Enabled**: メッシュデータを最適化して、描画パフォーマンスを向上させます。
    UnityのOptimize Mesh機能では、メッシュのポリゴンオーダー（Polygon Order）とバーテックスオーダー（Vertex Order）の違いは以下の通りです。

-----------------------------------------------------------------------------------------------------------------------------
### ポリゴンオーダー（Polygon Order）
ポリゴンオーダーは、メッシュ内の三角形（ポリゴン）の並び順を最適化します。これにより、メッシュをレンダリングする際の効率が向上します。具体的には、以下のような効果があります：

1. **キャッシュの最適化**：
   - GPUの頂点キャッシュの効率を高めることで、同じ頂点が何度もフェッチされるのを避けます。これにより、レンダリングのパフォーマンスが向上します。

2. **レンダリングの一貫性**：
   - ポリゴンの順序を最適化することで、メッシュの描画がよりスムーズになり、視覚的な一貫性が保たれます。

### バーテックスオーダー（Vertex Order）
バーテックスオーダーは、メッシュ内の頂点の並び順を最適化します。この最適化は、特にスキニングメッシュやアニメーションメッシュで重要です。以下のような効果があります：

1. **スキニングの効率化**：
   - スキンメッシュの場合、最適化された頂点順序はスキンニング計算を効率化し、CPUの負荷を減らします。これにより、アニメーションのパフォーマンスが向上します。

2. **メモリの局所性**：
   - 頂点データのメモリ局所性が向上し、キャッシュミスが減少します。これにより、メモリアクセスの効率が高まり、全体的なパフォーマンスが改善します。


両方の最適化は、最終的にはメッシュのレンダリングパフォーマンスを向上させるためのものですが、異なる側面に焦点を当てています。用途に応じて、適切な最適化手法を選択することが重要です。
-----------------------------------------------------------------------------------------------------------------------------

4. **Keep Quads**:
   - **Enabled**: 四角形のポリゴンを維持します。モデリングソフトウェアからインポートする際に便利です。

5. **Weld Vertices**:
   - **Enabled**: 近接する頂点を結合し、メッシュのデータ量を減らします。

6. **Index Format**:
   - **16 bit**: 小さなメッシュ用。
   - **32 bit**: 大きなメッシュ用。頂点数が65,536を超える場合に必要です。

7. **Normals**:
   - **Import**: モデルに付属の法線を使用します。
   - **Calculate**: Unityが法線を計算します。スムーズなシェーディングを行いたい場合に使用します。
   - **None**: 法線を使用しません。

8. **Normals Mode**:
   - **Unweighted Legacy**: 古い法線計算方式。
   - **Unweighted**: 新しい法線計算方式。
   - **Angle Weighted**: より滑らかな結果を得るために角度を考慮します.
   - **Area Weighted**: 面積に基づいて法線を計算します。
   - **None**: 法線を計算しません。

9. **Smoothing Angle**:
   - 法線を計算する際に使用される角度。大きいほどスムーズなシェーディングになります。

10. **Tangents**:
    - **Import**: モデルに付属の接線を使用します。
    - **Calculate (MikkTSpace)**: UnityがMikkTSpaceアルゴリズムを使用して接線を計算します。
    - **Calculate (Legacy)**: Unityが旧方式で接線を計算します。
    - **None**: 接線を使用しません。

11. **Mesh Compression**:
    - **Off, Low, Medium, High**: メッシュデータを圧縮します。圧縮率が高いほどデータ量が減少しますが、品質に影響が出る場合があります。

12. **Generate Lightmap UVs**:
    - **Enabled**: ライトマップ用のUVを生成します。

13. **Lightmap Pack Margin**:
    - ライトマップ用UV間のマージン。値が大きいほど隙間が広がります。

14. **Generate Secondary UVs**:
    - **Enabled**: 二次UVを生成します。特にライトマッピングやベイクドGIに使用します。

15. **Secondary UV Pack Margin**:
    - 二次UV間のマージン。

### Rig タブ

1. **Animation Type**:
   - **None**: アニメーションをインポートしません。
   - **Legacy**: 古いアニメーションシステムを使用します。
   - **Generic**: ジェネリックリグを使用します。
   - **Humanoid**: ヒューマノイドリグを使用します。

2. **Avatar Definition**:
   - **Create From This Model**: このモデルから新しいアバターを作成します。
   - **Copy From Other Avatar**: 他のモデルからアバターをコピーします。

3. **Root Node**:
   - ルートノードを指定します。アニメーションのベースノードとなります。

-----------------------------------------------------------------------------------------------------------------------------
`Optimize Game Objects`
### 主な機能と効果

1. **階層構造の簡略化**：
   - アニメーションに不要なボーンやオブジェクトを削除することで、階層構造が簡略化されます。これにより、メモリ使用量が削減され、ランタイムパフォーマンスが向上します。

2. **パフォーマンスの向上**：
   - 不要なオブジェクトが削除されることで、レンダリングやアニメーションの計算が効率化されます。これにより、特にモバイルデバイスやリソースが限られた環境でのパフォーマンスが向上します。

3. **エディタ内の効率化**：
   - 階層が簡略化されることで、エディタ内での操作が容易になります。シーンビューやインスペクタでの操作が迅速に行えるようになります。

### 使用方法

`Optimize Game Objects` を使用するには、Unityのインスペクタでモデルのインポート設定を調整します。以下はその手順です。

1. **モデルのインポート設定**：
   - インポートしたいモデルをプロジェクトビューで選択します。
   - インスペクタウィンドウでインポート設定を開きます。
   - 「Rig」タブを選択し、「Animation Type」を「Humanoid」または「Generic」に設定します。
   - 「Optimize Game Objects」にチェックを入れます。

2. **必要なボーンの公開**：
   - 「Optimize Game Objects」にチェックを入れると、「Exposed Transforms」リストが表示されます。
   - アニメーションやスクリプトでアクセスする必要があるボーンやオブジェクトをこのリストに追加します。



### 実際の使用例

例えば、Humanoidキャラクターをインポートする際に、アニメーションのパフォーマンスを最適化したい場合、以下の手順を行います：

1. **モデルをインポート**：
   - キャラクターモデルをUnityプロジェクトにインポートします。

2. **インスペクタで設定**：
   - インスペクタで「Rig」タブを選択し、「Animation Type」を「Humanoid」に設定。
   - 「Optimize Game Objects」にチェックを入れます。
   - 「Exposed Transforms」に必要なボーン（例：手、足など）を追加します。

3. **スクリプトからアクセス**：
   - 必要なボーンにスクリプトからアクセスします。以下のように、公開されたボーンを取得できます。


### まとめ

`Optimize Game Objects` は、Unityにおけるキャラクターアニメーションの最適化に非常に有効なツールです。不要なボーンやオブジェクトを削除することで、メモリ使用量を削減し、パフォーマンスを向上させます。この機能を適切に使用することで、リソースが限られた環境でも高品質なアニメーションを実現することができます。
`StripBones`は、Unityにおけるスキニングやメッシュの最適化プロセスの一部として使用されるオプションです。これは、アニメーションに使用されていないボーンをメッシュから削除する機能です。これにより、メモリ使用量が削減され、ランタイムのパフォーマンスが向上することがあります。

-----------------------------------------------------------------------------------------------------------------------------

### StripBonesの主な目的と効果

1. **不要なボーンの削減**：
   - アニメーションに寄与しないボーンを削除することで、メッシュデータが軽量化されます。特に、複雑なリグや多くのボーンを持つキャラクターにおいて効果的です。

2. **メモリ使用量の削減**：
   - 不要なボーンが削除されることで、メモリ使用量が減少し、特にモバイルデバイスやリソースが限られた環境でのパフォーマンスが向上します。

3. **パフォーマンスの向上**：
   - ランタイムでのボーン変形計算の負荷が軽減され、描画のパフォーマンスが向上します。

### 使用方法

`StripBones`は通常、Unityのインポート設定やエディター拡張で使用されます。以下は、モデルのインポート設定で`StripBones`オプションを有効にする手順です。

1. **モデルのインポート設定**：
   - モデルを選択し、インスペクターウィンドウでインポート設定を表示します。
   - 「Rig」タブを選択し、「Animation Type」を「Humanoid」または「Generic」に設定します。
   - 「Optimize Game Objects」をチェックし、「Exposed Transforms」で必要なボーンを指定します。

2. **スクリプトを使用して`StripBones`を有効にする**：
   - スクリプトを使用してメッシュを最適化し、不要なボーンを削除することもできます。以下は、その一例です。



### まとめ

`StripBones`は、Unityのスキンメッシュ最適化の一環として、不要なボーンを削除するための便利な機能です。この機能を使用することで、メモリ使用量を削減し、パフォーマンスを向上させることができます。特に複雑なリグやキャラクターを扱う場合には、`StripBones`を適切に利用することで、効率的なゲーム開発が可能となります。
`SkinWeights`は、Unityにおいてスキニング（キャラクターのスキンやメッシュの変形）を行う際に使用される設定です。スキンウェイトは、各頂点に対して影響を与えるボーン（骨）の数と、その影響の強さを決定します。スキニングは、キャラクターアニメーションの重要な要素であり、特に複雑なキャラクターやリグを扱う場合には、効率的なスキンウェイト設定が必要です。

### スキンウェイトの設定オプション

Unityのスキンウェイトには、主に以下の設定オプションがあります：

1. **One Bone (1 Bone)**:
   - 各頂点が影響を受けるのは1つのボーンのみです。
   - 最も効率的ですが、ディフォーメーションが非常に単純で、滑らかな変形が得られない場合があります。

2. **Two Bones (2 Bones)**:
   - 各頂点が影響を受けるのは最大2つのボーンです。
   - 一部の変形には十分ですが、複雑なリグには不向きです。

3. **Four Bones (4 Bones)**:
   - 各頂点が影響を受けるのは最大4つのボーンです。
   - 高品質な変形が可能で、多くのキャラクターアニメーションに適しています。

4. **Unlimited (無制限)**:
   - 各頂点が影響を受けるボーンの数に制限がありません。
   - 最高品質の変形が可能ですが、パフォーマンスに影響を与える可能性があります。

### スクリプトでのスキンウェイト設定

Unityのスクリプトを使用してスキンウェイトを設定することができます。例えば、`SkinnedMeshRenderer`コンポーネントの`quality`プロパティを使用してスキンウェイトを設定します。



### スキンウェイトの実際の計算

スキンウェイトは、各頂点の変形を計算する際に使用されます。頂点の最終位置は、各ボーンの変形マトリックスとスキンウェイトの組み合わせによって計算されます。以下は、頂点の最終位置を計算する擬似コードです：



### まとめ

`SkinWeights`は、キャラクターアニメーションにおいて重要な役割を果たします。適切なスキンウェイトの設定は、キャラクターの変形品質とパフォーマンスに直接影響します。Unityでは、用途やパフォーマンス要件に応じてスキンウェイトを調整することができます。一般的に、複雑なキャラクターには多くのボーンを使用する設定（例えば4つのボーン）が適していますが、パフォーマンスのトレードオフを考慮する必要があります。
### Animation タブ

1. **Import Animation**:
   - **Enabled**: アニメーションをインポートします。

2. **Animation Compression**:
   - **Off**: 圧縮しません。
   - **Keyframe Reduction**: キーフレームの数を減らします。
   - **Keyframe Reduction and Compression**: キーフレームの削減と圧縮を行います。
   - **Optimal**: 最適な圧縮方法を使用します。

3. **Animation Clip Settings**:
   - **Loop Time**: アニメーションをループさせます。
   - **Loop Pose**: ループのスムーズさを保つためにポーズを調整します。
   - **Cycle Offset**: ループのオフセットを設定します。
   - **Additive Reference Pose**: 加算的アニメーションの基準ポーズを設定します。

4. **Root Transform Rotation**:
   - **Bake Into Pose**: 回転をポーズにベイクします。
   - **Based Upon**: 回転の基準を設定します（Original, Body Orientationなど）。

5. **Root Transform Position (Y)**:
   - **Bake Into Pose**: Y座標の位置をポーズにベイクします。
   - **Based Upon**: 位置の基準を設定します（Original, Center of Massなど）。

6. **Root Transform Position (XZ)**:
   - **Bake Into Pose**: XZ座標の位置をポーズにベイクします。
   - **Based Upon**: 位置の基準を設定します（Original, Center of Massなど）。

### Materials タブ

1. **Import Materials**:
   - **Enabled**: マテリアルをインポートします。

2. **Material Naming**:
   - **By Base Texture Name**: ベーステクスチャの名前でマテリアルを命名します。
   - **From Model's Material**: モデルのマテリアル名を使用します。

3. **Material Search**:
   - **Local Materials Folder**: ローカルのマテリアルフォルダーから検索します。
   - **Recursive Up**: 上位のフォルダーも再帰的に検索します。
   - **Project-Wide**: プロジェクト全体から検索します。

### その他のオプション

1. **Import Constraints**:
   - **Enabled**: モデルの制約（コンストレイント）をインポートします。

### まとめ

Unityの3Dモデルインポート設定には多くのオプションがあり、これらを適切に設定することで、モデルの見た目やパフォーマンスを最適化できます。上記の説明を参考にして、プロジェクトのニーズに合わせた最適な設定を行ってください。
 */
public class modelImportSettings: MonoBehaviour
{
    // Start is called before the first frame update
    void Start()
    {
        
    }

    // Update is called once per frame
    void Update()
    {
        
    }
}
