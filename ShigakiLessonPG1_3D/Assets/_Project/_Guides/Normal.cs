using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/*
 Unityでの法線計算方式について説明します。法線ベクトル（Normal Vector）は、メッシュの各頂点や面の向きを表す重要な要素で、ライティングやシェーディングに影響を与えます。法線の計算方式にはいくつかの方法があり、それぞれの用途や目的に応じて選択されます。

### 法線計算の基本
法線ベクトルは、3Dモデルの面がどちらの方向を向いているかを示します。通常、頂点法線（Vertex Normal）と面法線（Face Normal）があり、これらは以下の方法で計算されます。

### 面法線（Face Normal）
面法線は、ポリゴン（通常は三角形）の面ごとに計算されます。各三角形の法線は、その面の垂直方向を表します。

**計算方法**：
1. 三角形の頂点 \(v0\), \(v1\), \(v2\) を定義します。
2. 頂点間のベクトルを計算します。
   - \(\mathbf{u} = v1 - v0\)
   - \(\mathbf{v} = v2 - v0\)
3. 法線ベクトル \(\mathbf{n}\) は、\(\mathbf{u}\) と \(\mathbf{v}\) の外積で求められます。
   - \(\mathbf{n} = \mathbf{u} \times \mathbf{v}\)
4. 法線ベクトルを正規化します（長さを1にします）。

### 頂点法線（Vertex Normal）
頂点法線は、メッシュの滑らかな外観を作成するために使用されます。頂点法線は、その頂点を共有するすべての面法線の平均として計算されます。

**計算方法**：
1. 各頂点に対して、共有しているすべての面の法線を収集します。
2. これらの面法線を平均化します。
3. 平均化された法線ベクトルを正規化します。

### 法線のリキャリキュレーション（Recalculation）
Unityでは、メッシュの法線を自動的に再計算するための機能が提供されています。これにより、モデルの形状やトポロジーの変更に応じて法線を更新することができます。

```csharp
// メッシュの法線を再計算する例
Mesh mesh = GetComponent<MeshFilter>().mesh;
mesh.RecalculateNormals();
```

### カスタム法線計算
場合によっては、カスタムの法線計算が必要になることもあります。これには、スムーズな法線や特定の効果を出すためのカスタムシェーダーを使用することが含まれます。

### 平滑法線（Smooth Normals）とフラット法線（Flat Normals）
- **平滑法線（Smooth Normals）**: モデルの表面を滑らかに見せるために使用されます。頂点法線を使用し、隣接する面の法線を平均化します。
- **フラット法線（Flat Normals）**: 面ごとに異なる法線を持つため、エッジがはっきりと見えます。面法線をそのまま使用します。

### まとめ
法線計算は3Dグラフィックスの基本的な技術であり、モデルの見栄えを大きく左右します。Unityでは、法線の再計算やカスタム法線の設定が簡単に行えるため、目的に応じた適切な法線計算方式を選択することが重要です。
 */
public class Normal : MonoBehaviour
{
    // Start is called before the first frame update
    void Start()
    {
        
    }

    // Update is called once per frame
    void Update()
    {
        
    }
}
